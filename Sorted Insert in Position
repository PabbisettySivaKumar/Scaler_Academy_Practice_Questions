Sorted Insert in Position


Given a sorted array A of size N and a target value B, return the index of the target in the list (0-based indexing) if the target is found.
If not found, return the index where it would be if it were inserted.

NOTE: You may assume no duplicates in the array. Users are expected to solve this in O(log(N)) time.

Input Format:

The first argument is an integer array A of size N.
The second argument is an integer B.
Output Format:

Return an integer denoting the index of the target value.
Example Input:

Input 1:
A = [1, 3, 5, 6]
B = 5

Input 2:
A = [1]
B = 2
Example Output

Output 1:
2 
Output 2:
1
Example Explanation:

Explanation 1: The target value 5 is present at index 2. 
Explanation 2: The target value 2 is expected to be present at index 1.


Solution:


class Solution:

  """
  @param A : list of integers
  @param B : integer
  @return an integer
  """

  def searchInsert(self, A, B):
    n = len(A)
    low = 0
    high = n - 1
    while low <= high:
      mid = (low + high) / 2
      mid = int(mid)

      if A[mid] == B:
        return mid

      elif A[mid] < B:
        low = mid + 1

      else:
        high = mid - 1

    return low
